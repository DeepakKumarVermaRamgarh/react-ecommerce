// Import necessary libraries
import { createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

// Define constants for different status of product state
export const STATUS = Object.freeze({
  IDLE: 'idle',
  LOADING: 'loading',
  ERROR: 'error',
});

// Define the base URL for the fake store API
const base_url = 'https://fakestoreapi.com';

// Define the initial state for products
const initialState = { products: [], status: STATUS.IDLE, product: {} };

// https://my-json-server.typicode.com/DeepakKumarVermaRamgarh/ecomm

// Action creator for fetching products from the API
export function fetchProducts() {
  return async (dispatch, getState) => {
    dispatch(setStatus(STATUS.LOADING));
    try {
      const { data } = await axios.get(`${base_url}/products`);
      dispatch(setInitialProducts(data));
      dispatch(setStatus(STATUS.IDLE));
    } catch (error) {
      setStatus(STATUS.ERROR);
      console.log(error);
    }
  };
}

// Action creator for adding a new product to the API
export function addNewProduct(newProduct) {
  return async (dispatch, getState) => {
    dispatch(setStatus(STATUS.LOADING));
    try {
      await axios.post(`${base_url}/products`, newProduct, {
        headers: {
          'content-type': 'application/json',
        },
      });
      dispatch(setStatus(STATUS.IDLE));
    } catch (err) {
      dispatch(setStatus(STATUS.ERROR));
      console.log(err);
    }
  };
}

// Action creator for updating a product in the API
export function updateProduct(productId, productData) {
  return async (dispatch, getState) => {
    dispatch(setStatus(STATUS.LOADING));
    try {
      await axios.patch(`${base_url}/products/${productId}`, productData, {
        headers: {
          'content-type': 'application/json',
        },
      });
      dispatch(setStatus(STATUS.IDLE));
    } catch (err) {
      dispatch(setStatus(STATUS.ERROR));
      console.log(err);
    }
  };
}

// Action creator for deleting a product from the API
export function deleteProduct(productId) {
  return async (dispatch, getState) => {
    dispatch(setStatus(STATUS.LOADING));
    try {
      await axios.delete(`${base_url}/products/${productId}`);
      dispatch(setStatus(STATUS.IDLE));
    } catch (err) {
      dispatch(setStatus(STATUS.ERROR));
      console.log(err);
    }
  };
}

// Action creator for fetching a single product from the API
export function getSingleProduct(id) {
  return async (dispatch, getState) => {
    dispatch(setStatus(STATUS.LOADING));
    try {
      const { data } = await axios.get(`${base_url}/products/${id}`);
      dispatch(setProduct(data));
      dispatch(setStatus(STATUS.IDLE));
    } catch (error) {
      dispatch(setStatus(STATUS.ERROR));
      console.log(error);
    }
  };
}

// Create the productSlice using Redux Toolkit's createSlice function
const productSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {
    // Reducer for setting the initial list of products
    setInitialProducts: (state, action) => {
      state.products = action.payload;
    },
    // Reducer for setting the status of the products (loading, error, etc.)
    setStatus: (state, action) => {
      state.status = action.payload;
    },
    // Reducer for setting a single product
    setProduct: (state, action) => {
      state.product = action.payload;
    },
  },
});

// Export the actions generated by createSlice
export const { setInitialProducts, setStatus, setProduct } =
  productSlice.actions;
// Export a selector function to get the product state from the Redux store
export const productSelector = state => state.products;

// Export the reducer generated by createSlice
export default productSlice.reducer;
